<JSP 내부객체>
request 객체 : 웹브라우저를 통해 서버에 어떤 정보를 요청하는 것을 request라 하며, 
이러한 요청 정보는 request 내부객체가 관리한다. 
객체 타입: javax.servlet.http.HttpServletRequest

=========================================================

(1) : getRemoteAddr();  : 웹 서버에 연결한 클라이언트의 IP 주소를 받는다.

(2) : getParameter(String name) : name에 해당하는 파라미터 값을 구한다.

(3) : getParameterNames() : 모든 파라미터 이름을 구한다.

(4) : getParameterValues(String name) : name에 해당하는 파라미터값들을 구한다.

(5) : getContextPath() : 웹어플리케이션의 컨텍스트 패스를 리턴받는다.
	(http://localhost:8181/prjName/folderName/ex.jsp중 /prjName)를 받는다.

(6) : getMethod() : get방식과 post방식을 구분할 수 있다.

(7) : getSession() : 세션 객체를 받는다.

(8) : getProtocol() : 해당 프로토콜을 받는다.

(9) : getRequestURL() : 요청 URL를 받는다.

(10) : getRequestURI() : 요청 URI를 받는다.

(11) : getServerPort(): 포트번호를 받는다.



2. response 객체 : 웹브라우저의 요청에 응답하는 것을 response한다고 하며, 이러한 응답의 정보는
	response 내부 객체가 갖고 있다. doGet, doPost 메소드의 두번째 파라미터와 동일하다.
객체타입 : javax.servlet.http.HttpServletResponse

(1) : getCharacterEncoding() : 응답할때 문자의 인코딩.

(2) : addCookie(Cookie) : 쿠키를 지정.

(3) : sendRedirect(URL) : 지정한 URL로 이동
      :  jsp 페이지에서 특정한 작업을 수행한 후 지정한 페이지로 이동하고 싶은 경우 
	response.sendRedirect() 를 사용한다.
	즉 특정 처리 후 또는 특정 조건일 때에 지정한 페이지로 이동하고 싶은 경우에 많이 사용된다.


3. out : 웹 브라우저로 HTML 코드를 출력하는 기능
객체 타입 : javax.servlet.jsp.JspWriter

(1) : PrintWriter : 처럼 스트림 형태로 데이터를 출력하는 클래스는 송신측과 수신측 사이에 가상의 통로를 만든다.
	out 내장 객체는 이 통로를 관리하는 변수이다.

(2) : page : 지시자의 buffer attribute를 이용하면 출력 버퍼의 크기를 바꿀 수 있다.
	buffer attribute는 버퍼의 크기를 kb 단위의 정수로 써야 하며, kb라는 단위 표시를 붙여 써야 한다.


4. application : JSp 페이지가 속하는 웹 애플리케이션에 관련된 기능
객체 타입 : javax.servlet.ServletConfig

(1) 컨텍스트 안의 text파일 가져오기 
String appPath = application.getContextPath();
String conPath = request.getContextPath();
String absolutePath = application.getRealPath("."); 를 하면 

appPath 는 현재 프로젝트의 상대 경로  /콘텍스트 루트
conPath 는 현재 프로젝트의 상대 경로  /콘텍스트 루트 
absolutePath 는 현재 프로젝트의 절대 경로 (애플리케이션 절대 경로 )


5. session : 세션에 관련된 기능 
객체 타입 : javax.servlet.http.httpSession

6. exception : 예외 객체
객체 타입 : java.lang.Throwable








